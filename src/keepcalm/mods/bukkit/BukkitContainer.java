package keepcalm.mods.bukkit;

import java.io.File;
import java.util.Arrays;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

import keepcalm.mods.bukkit.asm.BukkitStarter;
import keepcalm.mods.bukkit.bukkitAPI.BukkitServer;
import keepcalm.mods.bukkit.common.CommonProxy;
import keepcalm.mods.bukkit.forgeHandler.BlockBreakEventHandler;
import keepcalm.mods.bukkit.forgeHandler.BukkitCrashCallable;
import keepcalm.mods.bukkit.forgeHandler.ConnectionHandler;
import keepcalm.mods.bukkit.forgeHandler.ForgeEventHandler;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.gui.ServerGUI;
import net.minecraftforge.common.Configuration;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.Property;

import com.google.common.eventbus.EventBus;

import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.Init;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.Mod.Metadata;
import cpw.mods.fml.common.Mod.PreInit;
import cpw.mods.fml.common.Mod.ServerStarting;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;
import cpw.mods.fml.common.network.NetworkMod;
import cpw.mods.fml.common.network.NetworkRegistry;
import cpw.mods.fml.relauncher.Side;
//import net.minecraftforge.event.EventBus;
//import net.minecraftforge.event.EventBus;

@Mod(modid="BukkitForge",name="BukkitForge",version="1.4.5-3")
@NetworkMod(clientSideRequired=false,serverSideRequired=false)
public class BukkitContainer {
	public static BukkitServer bServer;
	public File myConfigurationFile;
	public boolean allowAnsi;
	public String pluginFolder;
	public static boolean showAllLogs;
	public static boolean isDediServer;
	public static String serverUUID;
	public static boolean overrideVanillaCommands;
	public static Logger bukkitLogger ;//.getLogger("[Bukkit API]");

	private static boolean isGuiEnabled = false;
	
	@SidedProxy(clientSide="keepcalm.mods.bukkit.client.ClientProxy",serverSide="keepcalm.mods.bukkit.common.CommonProxy")
	public static CommonProxy theProxy;

	@Metadata("BukkitForge")
	public static ModMetadata meta;

	@Instance("BukkitForge")
	public static BukkitContainer instance;
	private static Thread bThread;


	public BukkitContainer() {
		if (Side.SERVER.isServer()) {
			isDediServer = true;
			if (MinecraftServer.getServer() != null && MinecraftServer.getServer().getGuiEnabled()) {
				isGuiEnabled = true;
				ServerGUI.logger.severe("BukkitForge plugins may misbehave when using the gui! Run the server with 'nogui'!");
			}
		}
		else
			isDediServer = false;
		instance = this;
		try {
			//ASMifier.main(new String[] {"net.minecraft.item.ItemStack"});
		} catch (Exception e) {
			System.out.println("FAILED to ASMIfy. Oh well.");
		}

	}
	public boolean registerBus(EventBus bus, LoadController controller) {
		bus.register(this);
		return true;
	}
	@PreInit
	public void preInit(FMLPreInitializationEvent ev) {
		bukkitLogger = ev.getModLog();
		bukkitLogger.setParent(FMLCommonHandler.instance().getFMLLogger());

		meta.modId = "BukkitForge";
		meta.name = "Bukkit For Vanilla";
		meta.version = BukkitServer.version + ", implementing Bukkit version " + BukkitServer.apiVer;
		meta.authorList = Arrays.asList(new String[]{"keepcalm"});
		meta.description = "An implementation Bukkit API for vanilla Minecraft.";
		
		meta.autogenerated = false;

		theProxy.registerKeyBindings();
		this.bukkitLogger.info("Initializing configuration...");
		myConfigurationFile = ev.getSuggestedConfigurationFile();

		Configuration config = new Configuration(myConfigurationFile);
		config.addCustomCategoryComment("consoleConfig", "Configuration for the server console");
		config.addCustomCategoryComment("dontTouchThis", "Things which are best left untouched");

		Property override = config.get(Configuration.CATEGORY_GENERAL, "overrideVanillaCommands", false);
		override.comment = "Override vanilla commands (/me etc) with Bukkit defaults (won't stop plugins from overriding)";
		this.overrideVanillaCommands = override.getBoolean(false);
		
		Property colour = config.get("consoleConfig", "enablecolour", isGuiEnabled ? false : true);
		colour.comment = "Enable coloured ANSI console output";
		this.allowAnsi = colour.getBoolean(false);

		Property plugins = config.get(Configuration.CATEGORY_GENERAL, "pluginDir", "plugins");
		plugins.comment = "The folder to look for plugins in.";
		this.pluginFolder = plugins.value;

		Property suuid = config.get("dontTouchThis", "serverUUID", this.genUUID());
		bukkitLogger.info("Set UUID to " + suuid.value);
		suuid.comment = "The UUID of the server. Don't touch this or it might break your plugins.";
		this.serverUUID = suuid.value;

		/*Property showAllLogs = config.get(Configuration.CATEGORY_GENERAL, "printForgeLogToGui", false);
		showAllLogs.comment = "Print stuff that's outputted to the logs to the GUI as it happens.";
		this.showAllLogs = showAllLogs.getBoolean(false);*/

		config.save();

	}

	public static BukkitContainer getInstance() {
		return instance;
	}


	private String genUUID() {
		String res = "" + System.currentTimeMillis();
		res += new Random().nextInt();
		res += "-" + BukkitServer.version;
		return res;
	}


	@Init
	public void init(FMLInitializationEvent ev) {
		FMLCommonHandler.instance().registerCrashCallable(new BukkitCrashCallable());
		bukkitLogger.info("Complete! Registering handlers...");
		NetworkRegistry.instance().registerConnectionHandler(new ConnectionHandler());
		if (Loader.isModLoaded("BlockBreak")) {
			try {
				MinecraftForge.EVENT_BUS.register(new BlockBreakEventHandler()) ;
			}
			catch (Exception e) {
				bukkitLogger.log(Level.FINE, "BlockBreak is present, but not!", e);
			}
		}

		try {
			MinecraftForge.EVENT_BUS.register(new ForgeEventHandler());
		}
		catch (Throwable e) {
			FMLCommonHandler.instance().getFMLLogger().log(Level.SEVERE,"[Bukkit API]: FAILED to add event handlers:", e);
			//e.printStackTrace();
		}
		bukkitLogger.info("Done!");
	}


	@ServerStarting
	public void serverStarting(FMLServerStartingEvent ev) {
		ThreadGroup theThreadGroup = new ThreadGroup("BukkitForge");
		this.bThread = new Thread(theThreadGroup, new BukkitStarter(ev.getServer()), "BukkitCoreAPI-0");
		bThread.start();
	}

}
